package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"

	"github.com/go-rod/rod/lib/devices/raw"
	"github.com/go-rod/rod/lib/utils"
)

func main() {
	devices := getDeviceList()

	code := ``
	for _, d := range devices {
		name := d.Title
		code += utils.S(`

			// {{.name}} device
			{{.name}} = Device{
				raw: &raw.Device{
					Title:        "{{.title}}",
					Capabilities: {{.capabilities}},
					UserAgent:    "{{.userAgent}}",
					Screen: raw.Screen{
						DevicePixelRatio: {{.devicePixelRatio}},
						Horizontal: raw.ScreenSize{
							Width: {{.horizontalWidth}},
							Height: {{.horizontalHeight}},
						},
						Vertical: raw.ScreenSize{
							Width: {{.verticalWidth}},
							Height: {{.verticalHeight}},
						},
					},
				},
			}`,
			"name", normalizeName(name),
			"title", name,
			"capabilities", normalizeStringSlice(d.Capabilities),
			"userAgent", d.UserAgent,
			"devicePixelRatio", d.Screen.DevicePixelRatio,
			"horizontalWidth", d.Screen.Horizontal.Width,
			"horizontalHeight", d.Screen.Horizontal.Height,
			"verticalWidth", d.Screen.Vertical.Width,
			"verticalHeight", d.Screen.Vertical.Height,
		)
	}

	code = utils.S(`// generated by "lib/devices/generate"

		package devices

		import (
			"github.com/go-rod/rod/lib/devices/raw"
		)

		var (
			{{.code}}
		)
	`, "code", code)

	path := "./lib/devices/list.go"
	utils.E(utils.OutputFile(path, code))

	utils.Exec("gofmt", "-s", "-w", path)
	utils.Exec("golangci-lint", "run", "--no-config", "--fix", "--disable-all", "-E", "gofmt,goimports,misspell", path)
}

func getDeviceList() []*raw.Device {
	// we use the list from the web UI of devtools
	res, err := http.Get(
		"https://raw.githubusercontent.com/ChromeDevTools/devtools-frontend/master/front_end/emulated_devices/module.json",
	)
	utils.E(err)

	var module struct {
		Extensions []struct {
			Device *raw.Device `json:"device"`
		} `json:"extensions"`
	}
	err = json.NewDecoder(res.Body).Decode(&module)
	utils.E(err)

	var devices []*raw.Device
	for _, e := range module.Extensions {
		devices = append(devices, e.Device)
	}
	return devices
}

func normalizeName(name string) string {
	name = strings.ReplaceAll(name, "/", "or")

	list := []string{}
	for _, s := range strings.Split(name, " ") {
		if len(s) > 1 {
			list = append(list, strings.ToUpper(s[0:1])+s[1:])
		} else {
			list = append(list, strings.ToUpper(s))
		}
	}

	return strings.Join(list, "")
}

func normalizeStringSlice(arr []string) string {
	quoted := make([]string, 0, len(arr))
	for _, s := range arr {
		quoted = append(quoted, fmt.Sprintf("%q", s))
	}
	return fmt.Sprintf("[]string{%s}", strings.Join(quoted, ","))
}
